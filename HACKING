1010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010
1   ___  ___          _     ______                                            1
0   |  \/  |         (_)    |  _  \              Open Source Tools,           0
1   | .  . | _____  ___  ___| | | |_____   __    Firmware, and HDL code for   1
0   | |\/| |/ _ \ \/ / |/ _ \ | | / _ \ \ / /    the Moxie processor core.    0
1   | |  | | (_) >  <| |  __/ |/ /  __/\ V /                                  1
0   \_|  |_/\___/_/\_\_|\___|___/ \___| \_/      http://moxielogic.org/blog   0
1                                                                             1
0101010101010101010101010101010101010101010101010101010101010101010101010101010
1010101010101010101010101010101010101010101010101010101010101010101010101010101

Hacking moxiedev tools
=======================

The moxiedev tree contains development sources for the GNU software
development tools suitable for targeting the moxie architecture.

Directories
------------

  build

  This directory is created at build time.  We place the gcc and src
  build directories here.

  busybox

  This is managed as a git submodule using the busybox-moxie
  repository hosted at http://github.com/atgreen/busybox-moxie.  The
  ant build.xml script will initialize and pull the source
  automatically when building.

  elf2flt

  This contains an anonymous cvs checkout of the upstream elf2flt
  tree.

  gcc

  This contains an anonymous svn checkout of the gcc tree from
  gcc.gnu.org.  Moxie patches are applied to this and maintained in
  our mercurial repository.  However, since the repo contains .svn
  directories, we can still update the tree directly from the upstream
  gcc trunk with svn.

  linux-2.6

  This is managed as a git submodule using the linux-2.6-moxie
  repository hosted at http://github.com/atgreen/linux-2.6-moxie.  The
  ant build.xml script will initialize and pull the source
  automatically when building.

  moxielyzer

  This is a moxie binary analysis tools, and is the original source
  for this project.

  qemu

  This is managed as a git submodule using the qemu-moxie repository
  hosted at http://github.com/atgreen/qemu-moxie.  The ant build.xml
  script will initialize and pull the source automatically when
  building.

  root

  This is the install directory for when we build and install for
  local testing.

  rtems

  This is managed as a git submodule using the qemu-rtems repository
  hosted at http://github.com/atgreen/rtems-moxie.  The ant build.xml
  script will initialize and pull the source automatically when
  building.

  src

  This contains an anonymous cvs checkout of the src tree (binutils,
  gas, ld, sim, gdb, newlib and libgloss) from sourceware.org.
  Moxie patches are applied to this and maintained in our mercurial
  repository.  However, since the repo contains CVS directories, we
  can still update the tree directly from the upstream src trunk with
  cvs.

  u-boot

  This contains an anonymous git checkout of the trunk of the u-boot tree.
  Moxie patches are applied to this and maintined in our git
  repository.  However, since the repo contains the .git directory, we
  can still update the tree directly from the upstream u-boot trunk with
  git.



Building
---------

Use the ant build script to configure, build and install the tools
like so:

$ ant build

The script contains several other options, which you can list by
simply running "ant" with no options.

Some ant installation will require that you add moxiedev's
root/usr/bin directory to your path before building.  The build system
will exit with an error message if this is required.



Signing RPMS
-------------

The RPMS hosted in the Moxie Logic yum repository are signed with the
official Moxie Logic signing key.  This is how it's done..

Make sure you have the GPG signing key installed properly like so:
$ gpg --list-keys

Extract the public key from the key ring into a text file:
$ gpg --export -a 'Moxie Logic' > RPM-GPG-KEY-MoxieLogic

Import the public key into the RPM DB:
$ sudo rpm --import RPM-GPG-KEY-MoxieLogic

Configure your ~/.rpmmacros file to include the following:
%_signature gpg
%_gpg_name  Moxie Logic

Now you're ready to sign the packages:
$ find dist/MoxieLogic -name \*.rpm | xargs rpm --addsign 

